// Don't edit this file, as it is generated by dredger
package core

import (
	"flag"
    "{{ lcfirst ( camelcase .ModuleName ) }}/core/log"
	"strings"

	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	uuid "github.com/google/uuid"
	"github.com/gobeam/stringy"
)

type Config struct {
	Debug               bool     `default:"false"`
	Service             string
	Sid                 string   `ignored:"true"`
	Name                string   `default:"{{.ModuleName}}"`
	Title               string
	Port                string   `default:"8080"`
	ApiKeys             []string `default:"" split_words:"true"`
	AuthorizationHeader string   `default:"" split_words:"true"`
	SessionKey          string   `default:"" split_words:"true"`
	Host                string   `ignored:"true"`
	User                string
	Policy              string   `default:""`
	OpaSvc              string   `default:""`
	Realm               string    `default:""`
	StaffUser           string   `default:"" split_words:"true"`
	StaffPassword       string   `default:"" split_words:"true"`
	ParticipantUser     string   `default:"" split_words:"true"`
	ParticipantPassword string   `default:"" split_words:"true"`
	CertPem             string   `default:"" split_words:"true"`
	KeyPem              string   `default:"" split_words:"true"`
	LogFile             string   `default:"" split_words:"true"`
	Tracing             bool     `default:"false"`
	Language            string   `default:"de"`
	Languages           []string `default:"en,de"`
	UseSse              bool     `default:"false"`
	ConfigExt
}

var (
    AppConfig Config
)

func init() {
	AppConfig.Name = os.Getenv(stringy.New("{{.ModuleName}}_NAME").SnakeCase("?", "").ToUpper())
	AppConfig.Host, _ = os.Hostname()
	AppConfig.User = os.Getenv("USER")
	sid, _ := uuid.NewUUID()
	AppConfig.Sid = sid.String()

	// parse command line arguments
	flag.StringVar(&AppConfig.Port, "port", AppConfig.Port, "AppConfig.Port to listen by the server")
	flag.StringVar(&AppConfig.Port, "p", AppConfig.Port, "AppConfig.Port to listen by the server")
	flag.StringVar(&AppConfig.Name, "name", AppConfig.Name, "Name of the service")
	flag.StringVar(&AppConfig.Name, "n", AppConfig.Name, "Name of the service")
	flag.BoolVar(&AppConfig.Debug, "d", AppConfig.Debug, "enable debugging level for logging")

	if AppConfig.Name == "" {
		AppConfig.Name = AppInfo.Service
	}
	if AppConfig.Title == "" {
		AppConfig.Title = AppConfig.Name
	}

	log.Setup(AppConfig.Name, AppInfo.Service, AppConfig.LogFile, AppConfig.Debug)

	err := godotenv.Load()
	if err != nil {
		log.Debug().Err(err).Msg("Didn't found .env file")
	}

	err = envconfig.Process(stringy.New(AppConfig.Name).SnakeCase("?", "").ToUpper(), &AppConfig)
	if err != nil {
		log.Fatal().Err(err).Str("name", stringy.New(AppConfig.Name).SnakeCase("?", "").ToUpper()).Msg("Couldn't read environment settings")
	}

	flag.Parse()
	log.Setup(AppConfig.Name, AppInfo.Service, AppConfig.LogFile, AppConfig.Debug)
	if AppConfig.SessionKey == "" {
		AppConfig.SessionKey = AppConfig.Name
	}

	log.Debug().Str("name", AppConfig.Name).Any("environment", AppConfig).Msg("Got environment")
	AppInfo.Name = AppConfig.Name
}
