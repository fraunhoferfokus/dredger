// Don't edit this file, as it is generated by dredger
package core

import (
	"flag"
    "{{ lcfirst ( camelcase .ModuleName ) }}/core/log"
	"strings"

	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	uuid "github.com/google/uuid"
	"github.com/gobeam/stringy"
)

type Config struct {
    Args                []string          `ignored:"true"`
	Debug               bool              `default:"false"`
	Version             bool              `default:"false" ignored:"true"`
	Service             string            `default:"{{.ModuleName}}" ignored:"true"`
	Sid                 string            `ignored:"true"`
	Name                string            `default:"{{.ModuleName}}"`
	Title               string
	PortNb              string            `default:"8080"` // Port is a reserved name in k8s
	ApiKeys             []string          `default:"" split_words:"true"`
	SessionKey          string            `default:"" split_words:"true"`
	Host                string            `ignored:"true"`
	User                string
	Policy              string            `default:""`
	OpaSvc              string            `default:""`
	Realm               string            `default:""`
	StaffUser           string            `default:"" split_words:"true"`
	StaffPassword       string            `default:"" split_words:"true"`
	ParticipantUser     string            `default:"" split_words:"true"`
	ParticipantPassword string            `default:"" split_words:"true"`
	CertPem             string            `default:"" split_words:"true"`
	KeyPem              string            `default:"" split_words:"true"`
	LogFile             string            `default:"" split_words:"true"`
	LokiServer          string            `default:"" split_words:"true"`
	LokiUser            string            `default:"" split_words:"true"`
	LokiPassword        string            `default:"" split_words:"true"`
	LokiKey             string            `default:"" split_words:"true"`
	LokiLabels          map[string]string `split_words:"true"`
	LokiBuffersize      int8              `default:"10" split_words:"true"`
	LokiMaxDelay        int               `default:"10" split_words:"true"`
	Tracing             bool              `default:"false"`
	Language            string            `default:"de"`
	Languages           []string          `default:"en,de"`
	UseSse              bool              `default:"false" split_words:"true"`
	ProgressDuration    int               `default:"100" split_words:"true"`
	RapidocDoc          bool              `default:"false" split_words:"true"`
	ElementsDoc         bool              `default:"false" split_words:"true"`
	ConfigExt
}

var (
    AppConfig Config
)

func init() {
	AppConfig.Service = Service
	AppConfig.Host, _ = os.Hostname()
	AppConfig.User = os.Getenv("USER")
	AppConfig.Sid = uuid.Must(uuid.NewV7()).String()

	// parse command line arguments
	flag.StringVar(&AppConfig.PortNb, "port", AppConfig.PortNb, "Port number to listen by the server")
	flag.StringVar(&AppConfig.PortNb, "p", AppConfig.PortNb, "Port number to listen by the server")
	flag.StringVar(&AppConfig.Name, "name", AppConfig.Name, "Name of the service")
	flag.StringVar(&AppConfig.Name, "n", AppConfig.Name, "Name of the service")
	flag.BoolVar(&AppConfig.Debug, "d", AppConfig.Debug, "enable debugging level for logging")
	flag.BoolVar(&AppConfig.Version, "V", AppConfig.Version, "print version")

    // extend custom flags
	initFlags()

    flag.Parse()
    AppConfig.Args = flag.Args()

	if AppConfig.Name == "" {
		AppConfig.Name = Service
	}
	if AppConfig.Title == "" {
		AppConfig.Title = AppConfig.Name
	}

    log.Setup(AppConfig.Name, Service, AppConfig.LogFile, AppConfig.LokiServer, AppConfig.LokiKey, AppConfig.LokiLabels, AppConfig.LokiBuffersize, AppConfig.LokiMaxDelay, AppConfig.Debug)

	log.Debug().Str("name", AppConfig.Name).Any("environment", os.Environ()).Msg("Got environment")

	err := godotenv.Load()
	if err != nil {
		log.Debug().Err(err).Msg("Didn't found .env file")
	}

	err = envconfig.Process(stringy.New(AppConfig.Name).SnakeCase("?", "").ToUpper(), &AppConfig)
	if err != nil {
		log.Fatal().Err(err).Str("name", stringy.New(AppConfig.Name).SnakeCase("?", "").ToUpper()).Msg("Couldn't read environment settings")
	}

    flag.Parse()

    log.Setup(AppConfig.Name, Service, AppConfig.LogFile, AppConfig.LokiServer, AppConfig.LokiKey, AppConfig.LokiLabels, AppConfig.LokiBuffersize, AppConfig.LokiMaxDelay, AppConfig.Debug)

    //  print app version
	if AppConfig.Version {
		println("version", version)
		os.Exit(0)
	}

	if AppConfig.SessionKey == "" {
		AppConfig.SessionKey = AppConfig.Name
	}

	log.Debug().Str("name", AppConfig.Name).Any("config", AppConfig).Msg("Got configuration")
	AppInfo.Name = AppConfig.Name

	// extend initialisation
	initExt()
}
