// Don't edit this file, as it is generated by dredger
package core

import (
	_ "embed"
	"flag"
    "log"
	"strings"

	"github.com/joho/godotenv"
	"github.com/kelseyhightower/envconfig"
	uuid "github.com/google/uuid"
	"github.com/gobeam/stringy"
)

var (
	// Version labels the release
	Version string = strings.TrimSpace(version)
	//go:embed version
	version string
	Service string = "{{.ModuleName}}"
)

type Config struct {
	Service             string
	Sid                 string   `ignored:"true"`
	Port                string   `default:"8080"`
	ApiKeys             []string `default:"" split_words:"true"`
	AuthorizationHeader string   `default:"" split_words:"true"`
	SessionKey          string   `default:"" split_words:"true"`
	Host                string   `ignored:"true"`
	Policy              string   `default:""`
	OpaSvc              string   `default:""`
	Realm               string    `default:""`
	StaffUser           string   `default:"" split_words:"true"`
	StaffPassword       string   `default:"" split_words:"true"`
	ParticipantUser     string   `default:"" split_words:"true"`
	ParticipantPassword string   `default:"" split_words:"true"`
	CertPem             string   `default:"" split_words:"true"`
	KeyPem              string   `default:"" split_words:"true"`
	LogFile             string   `default:"" split_words:"true"`
	Tracing             bool     `default:"false"`
	Language            string   `default:"de"`
	Languages           []string `default:"en,de"`
	JaegerCollector     string   `default:"" split_words:"true"`
	ConfigExt
}

var AppConfig Config

func init() {
	godotenv.Load()

	sid, _ := uuid.NewUUID()
	AppConfig = Config{Sid: sid.String(), Service: Service}
	err := envconfig.Process(stringy.New(Service).SnakeCase("?", "").ToUpper(), &AppConfig)
	if err != nil {
		log.Fatal(Service, "Could not parse config")
	}

	AppConfig.Host, _ = os.Hostname()
	flag.StringVar(&AppConfig.Port, "p", AppConfig.Port, "port of the service")
	flag.Parse()
}
