// Don't edit this file, as it is generated by dredger
package log

import (
	"os"
	"time"

	rotatelogs "github.com/lestrrat-go/file-rotatelogs"
	"github.com/rs/zerolog"

	"{{ .ModuleName }}/core"
	"{{ .ModuleName }}/core/log/logger"
)

var log logger.ZeroLog
var Trace func() *logger.MultiEvent
var Debug func() *logger.MultiEvent
var Info func() *logger.MultiEvent
var Warn func() *logger.MultiEvent
var Error func() *logger.MultiEvent
var Fatal func() *logger.MultiEvent
var Panic func() *logger.MultiEvent
var Print func(v ...interface{})
var Printf func(format string, v ...interface{})

// instance name of the service
var Name string

// initial setup
func init() {
	Setup(false)
}

// Setup the logger with or without debugging
func Setup(debug bool) {
	// the multi logger
	log = logger.ZeroLog{}

	// add console logger
	console := zerolog.New(zerolog.ConsoleWriter{Out: os.Stderr, TimeFormat: time.RFC3339}).
		With().
		Timestamp().
		Str("service", core.Service).
		Str("name", Name).
		Logger()

	// add rotating file logger optionally
	if core.AppConfig.LogFile != "" {
		log.AddLoggerWarn(&console)
		logfile, err := rotatelogs.New(
			core.AppConfig.LogFile+".%Y%m%d%H%M",
			rotatelogs.WithLinkName(core.AppConfig.LogFile),
			rotatelogs.WithMaxAge(24*time.Hour),
			rotatelogs.WithRotationTime(time.Hour),
		)
		if err != nil {
			log.Error().Str("logfile", core.AppConfig.LogFile).Err(err).Msg("can't create rotating log file")
			return
		}
		defer logfile.Close()
		logger := zerolog.New(logfile).
			With().
			Timestamp().
			Str("service", core.Service).
			Str("name", Name).
			Logger()
		if debug {
			log.AddLoggerDebug(&logger)
		} else {
			log.AddLoggerInfo(&logger)
		}
	} else {
		if debug {
			log.AddLoggerDebug(&console)
		} else {
			log.AddLoggerInfo(&console)
		}
	}
	Trace = log.Trace
	Debug = log.Debug
	Info = log.Info
	Warn = log.Warn
	Error = log.Error
	Fatal = log.Fatal
	Panic = log.Panic
	Print = log.Print
	Printf = log.Printf
}
