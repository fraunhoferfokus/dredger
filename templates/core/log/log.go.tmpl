// Don't edit this file, as it is generated by dredger
package log

import (
	"os"
	"time"

	rotatelogs "github.com/lestrrat-go/file-rotatelogs"
	"github.com/rs/zerolog"

	"{{ lcfirst ( camelcase .ModuleName ) }}/core"
	"{{ lcfirst ( camelcase .ModuleName ) }}/core/log/loki"
	"{{ lcfirst ( camelcase .ModuleName ) }}/core/log/logger"
)

var log logger.ZeroLog
var Trace func() *logger.MultiEvent
var Debug func() *logger.MultiEvent
var Info func() *logger.MultiEvent
var Warn func() *logger.MultiEvent
var Error func() *logger.MultiEvent
var Fatal func() *logger.MultiEvent
var Panic func() *logger.MultiEvent
var Print func(v ...interface{})
var Printf func(format string, v ...interface{})

// Setup the logger with or without debugging
func Setup(name string, service string, logFilename string, lokiServer string, lokiKey string, labels map[string]string, size int8, timeout int, debug bool) {
	// the multi logger
	log = logger.ZeroLog{}

	// Add console logger
	//
	console := zerolog.New(zerolog.ConsoleWriter{Out: os.Stderr, TimeFormat: time.RFC3339}).
		With().
		Timestamp().
		Str("service", service).
		Str("name", name).
		Logger()
	if logFilename != "" || lokiServer != "" {
		log.AddLoggerWarn(&console)
	} else {
		if debug {
			log.AddLoggerDebug(&console)
		} else {
			log.AddLoggerInfo(&console)
		}
	}

	// Add rotating file logger optionally
	//
	if logFilename != "" {
		println("Add file logger")
		logFile, err := rotatelogs.New(
			logFilename+".%Y%m%d%H%M",
			rotatelogs.WithLinkName(logFilename),
			rotatelogs.WithMaxAge(24*time.Hour),
			rotatelogs.WithRotationTime(time.Hour),
		)
		if err != nil {
			log.Error().Str("logFile", logFilename).Err(err).Msg("can't create rotating log file")
			return
		}
		defer logFile.Close()
		logger := zerolog.New(logFile).
			With().
			Timestamp().
			Str("service", service).
			Str("name", name).
			Logger()
		if debug {
			log.AddLoggerDebug(&logger)
		} else {
			log.AddLoggerInfo(&logger)
		}
	}

	// Add loki logger optionally
	//
	if lokiServer != "" {
		var logWC *loki.LokiLogger
		logWC, _ = loki.New(lokiServer, lokiKey, size, timeout, labels)
		defer logWC.Close()

		logger := zerolog.New(logWC).
			With().
			Timestamp().
			Str("service", service).
			Str("name", name).
			Logger()
		if debug {
			log.AddLoggerDebug(&logger)
		} else {
			log.AddLoggerInfo(&logger)
		}
		log.Info().Msg("Added Loki logger")
	}

	// Alias log functions
	//
	Trace = log.Trace
	Debug = log.Debug
	Info = log.Info
	Warn = log.Warn
	Error = log.Error
	Fatal = log.Fatal
	Panic = log.Panic
	Print = log.Print
	Printf = log.Printf
}
