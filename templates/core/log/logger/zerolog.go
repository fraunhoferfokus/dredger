// Don't edit this file, as it is generated by dredger
package logger

import (
	"github.com/rs/zerolog"
)

type ZeroLog struct {
	debugLogger []*zerolog.Logger
	infoLogger  []*zerolog.Logger
	warnLogger  []*zerolog.Logger
	errorLogger []*zerolog.Logger
	fatalLogger []*zerolog.Logger
}

func (l *ZeroLog) WithLevel(level zerolog.Level) *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.debugLogger {
		event.events = append(event.events, logger.WithLevel(level))
	}
	return &event
}

func (l *ZeroLog) Trace() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.debugLogger {
		event.events = append(event.events, logger.Trace())
	}
	return &event
}

func (l *ZeroLog) Debug() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.debugLogger {
		event.events = append(event.events, logger.Debug())
	}
	return &event
}

func (l *ZeroLog) Print(v ...interface{}) {
	for _, logger := range l.debugLogger {
		logger.Print(v...)
	}
}

func (l *ZeroLog) Printf(format string, v ...interface{}) {
	for _, logger := range l.debugLogger {
		logger.Printf(format, v...)
	}
}

func (l *ZeroLog) Info() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.infoLogger {
		event.events = append(event.events, logger.Info())
	}
	return &event
}

func (l *ZeroLog) Warn() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.warnLogger {
		event.events = append(event.events, logger.Warn())
	}
	return &event
}

func (l *ZeroLog) Error() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.errorLogger {
		event.events = append(event.events, logger.Error())
	}
	return &event
}

func (l *ZeroLog) Fatal() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.fatalLogger {
		event.events = append(event.events, logger.Fatal())
	}
	return &event
}

func (l *ZeroLog) Panic() *MultiEvent {
	event := MultiEvent{[]*zerolog.Event{}}
	for _, logger := range l.fatalLogger {
		event.events = append(event.events, logger.Fatal())
	}
	return &event
}

func (l *ZeroLog) AddLoggerDebug(logger *zerolog.Logger) {
	l.debugLogger = append(l.debugLogger, logger)
	l.infoLogger = append(l.infoLogger, logger)
	l.warnLogger = append(l.warnLogger, logger)
	l.errorLogger = append(l.errorLogger, logger)
	l.fatalLogger = append(l.fatalLogger, logger)
}

func (l *ZeroLog) AddLoggerInfo(logger *zerolog.Logger) {
	l.infoLogger = append(l.infoLogger, logger)
	l.warnLogger = append(l.warnLogger, logger)
	l.errorLogger = append(l.errorLogger, logger)
	l.fatalLogger = append(l.fatalLogger, logger)
}

func (l *ZeroLog) AddLoggerWarn(logger *zerolog.Logger) {
	l.warnLogger = append(l.warnLogger, logger)
	l.errorLogger = append(l.errorLogger, logger)
	l.fatalLogger = append(l.fatalLogger, logger)
}

func (l *ZeroLog) AddLoggerError(logger *zerolog.Logger) {
	l.errorLogger = append(l.errorLogger, logger)
	l.fatalLogger = append(l.fatalLogger, logger)
}

func (l *ZeroLog) AddLoggerFatal(logger *zerolog.Logger) {
	l.fatalLogger = append(l.fatalLogger, logger)
}
