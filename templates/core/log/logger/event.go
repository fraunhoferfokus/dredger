// Don't edit this file, as it is generated by dredger
package logger

import (
	"fmt"
	"net"
	"time"

	"github.com/rs/zerolog"
)

type MultiEvent struct {
	events []*zerolog.Event
}

func (e *MultiEvent) AnErr(key string, err error) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.AnErr(key, err)
	}
	return e
}

func (e *MultiEvent) Any(key string, a any) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Any(key, a)
	}
	return e
}

func (e *MultiEvent) Array(key string, arr zerolog.LogArrayMarshaler) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Array(key, arr)
	}
	return e
}

func (e *MultiEvent) Bool(key string, b bool) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Bool(key, b)
	}
	return e
}

func (e *MultiEvent) Bools(key string, b []bool) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Bools(key, b)
	}
	return e
}

func (e *MultiEvent) Bytes(key string, val []byte) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Bytes(key, val)
	}
	return e
}

func (e *MultiEvent) Caller(skip ...int) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Caller(skip...)
	}
	return e
}

func (e *MultiEvent) CallerSkipFrame(skip int) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.CallerSkipFrame(skip)
	}
	return e
}

func (e *MultiEvent) Dict(key string, dict *zerolog.Event) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Dict(key, dict)
	}
	return e
}

func (e *MultiEvent) Discard() *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Discard()
	}
	return e
}

func (e *MultiEvent) Dur(key string, d time.Duration) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Dur(key, d)
	}
	return e
}

func (e *MultiEvent) Durs(key string, d []time.Duration) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Durs(key, d)
	}
	return e
}

func (e *MultiEvent) EmbedObject(obj zerolog.LogObjectMarshaler) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.EmbedObject(obj)
	}
	return e
}

func (e *MultiEvent) Err(err error) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Err(err)
	}
	return e
}

func (e *MultiEvent) Errs(key string, errs []error) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Errs(key, errs)
	}
	return e
}

func (e *MultiEvent) Fields(fields interface{}) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Fields(fields)
	}
	return e
}

func (e *MultiEvent) Float32(key string, f float32) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Float32(key, f)
	}
	return e
}

func (e *MultiEvent) Float64(key string, f float64) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Float64(key, f)
	}
	return e
}

func (e *MultiEvent) Floats32(key string, f []float32) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Floats32(key, f)
	}
	return e
}

func (e *MultiEvent) Floats64(key string, f []float64) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Floats64(key, f)
	}
	return e
}

func (e *MultiEvent) Hex(key string, val []byte) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Hex(key, val)
	}
	return e
}

func (e *MultiEvent) IPAddr(key string, ip net.IP) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.IPAddr(key, ip)
	}
	return e
}

func (e *MultiEvent) IPPrefix(key string, pfx net.IPNet) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.IPPrefix(key, pfx)
	}
	return e
}

func (e *MultiEvent) Int(key string, val int) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Int(key, val)
	}
	return e
}

func (e *MultiEvent) Int16(key string, val int16) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Int16(key, val)
	}
	return e
}

func (e *MultiEvent) Int32(key string, val int32) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Int32(key, val)
	}
	return e
}

func (e *MultiEvent) Int64(key string, val int64) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Int64(key, val)
	}
	return e
}

func (e *MultiEvent) Interface(key string, val interface{}) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Interface(key, val)
	}
	return e
}

func (e *MultiEvent) Ints(key string, val []int) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Ints(key, val)
	}
	return e
}

func (e *MultiEvent) Ints16(key string, val []int16) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Ints16(key, val)
	}
	return e
}

func (e *MultiEvent) Ints32(key string, val []int32) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Ints32(key, val)
	}
	return e
}

func (e *MultiEvent) Ints64(key string, val []int64) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Ints64(key, val)
	}
	return e
}

func (e *MultiEvent) Ints8(key string, val []int8) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Ints8(key, val)
	}
	return e
}

func (e *MultiEvent) MACAddr(key string, ha net.HardwareAddr) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.MACAddr(key, ha)
	}
	return e
}

func (e *MultiEvent) Msg(s string) {
	for _, event := range e.events {
		event.Msg(s)
	}
}

func (e *MultiEvent) MsgFunc(createMsg func() string) {
	for _, event := range e.events {
		event.MsgFunc(createMsg)
	}
}

func (e *MultiEvent) Msgf(format string, v ...interface{}) {
	for _, event := range e.events {
		event.Msgf(format, v...)
	}
}

func (e *MultiEvent) Object(key string, obj zerolog.LogObjectMarshaler) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Object(key, obj)
	}
	return e
}

func (e *MultiEvent) RawJSON(key string, b []byte) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.RawJSON(key, b)
	}
	return e
}

func (e *MultiEvent) Send() {
	for _, event := range e.events {
		event.Send()
	}
}

func (e *MultiEvent) Stack() *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Stack()
	}
	return e
}

func (e *MultiEvent) Str(key, val string) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Str(key, val)
	}
	return e
}

func (e *MultiEvent) Stringer(key string, val fmt.Stringer) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Stringer(key, val)
	}
	return e
}

func (e *MultiEvent) Stringers(key string, vals []fmt.Stringer) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Stringers(key, vals)
	}
	return e
}

func (e *MultiEvent) Strs(key string, vals []string) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Strs(key, vals)
	}
	return e
}

func (e *MultiEvent) Time(key string, t time.Time) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Time(key, t)
	}
	return e
}

func (e *MultiEvent) TimeDiff(key string, t time.Time, start time.Time) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.TimeDiff(key, t, start)
	}
	return e
}

func (e *MultiEvent) Times(key string, t []time.Time) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Times(key, t)
	}
	return e
}

func (e *MultiEvent) Timestamp() *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Timestamp()
	}
	return e
}

func (e *MultiEvent) Uint(key string, val uint) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uint(key, val)
	}
	return e
}

func (e *MultiEvent) Uint16(key string, val uint16) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uint16(key, val)
	}
	return e
}

func (e *MultiEvent) Uint32(key string, val uint32) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uint32(key, val)
	}
	return e
}

func (e *MultiEvent) Uint64(key string, val uint64) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uint64(key, val)
	}
	return e
}

func (e *MultiEvent) Uints(key string, val []uint) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uints(key, val)
	}
	return e
}

func (e *MultiEvent) Uints16(key string, val []uint16) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uints16(key, val)
	}
	return e
}

func (e *MultiEvent) Uints32(key string, val []uint32) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uints32(key, val)
	}
	return e
}

func (e *MultiEvent) Uints64(key string, val []uint64) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uints64(key, val)
	}
	return e
}

func (e *MultiEvent) Uints8(key string, val []uint8) *MultiEvent {
	for i, event := range e.events {
		e.events[i] = event.Uints8(key, val)
	}
	return e
}
