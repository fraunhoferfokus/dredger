// Don't edit this file, as it is generated by dredger
package main

import (
	{{- if .AddDatabase}}
		"{{ lcfirst ( camelcase .ModuleName ) }}/db"
	{{- end}}
	"{{ lcfirst ( camelcase .ModuleName ) }}/core"
	"{{ lcfirst ( camelcase .ModuleName ) }}/core/log"
	"{{ lcfirst ( camelcase .ModuleName ) }}/core/tracing"
	"{{ lcfirst ( camelcase .ModuleName ) }}/rest"
	"{{ lcfirst ( camelcase .ModuleName ) }}/rest/middleware"
	"{{ lcfirst ( camelcase .ModuleName ) }}/web"
	_ "embed"
	"context"

	{{- if .AddDatabase}}
		"os"
	{{- end}}

	"github.com/labstack/echo/v4"
	echoMiddleware "github.com/labstack/echo/v4/middleware"
	// "go.opentelemetry.io/contrib/instrumentation/github.com/labstack/echo/otelecho"
)

//go:embed web
var embeddedFS embed.FS

func main() {
    // ToDo: Add basic command line options as _-n_/_-name_ and _-d_/_-debug_ using flags

	log.Info().Str("port", core.AppConfig.PortNb).Msg("Starting service")

	// init Opentelemetry
    if core.AppConfig.Tracing {
    	tp, err := tracing.InitTracer()
    	if err != nil {
    		log.Fatal().Err(err).Msg("Initializing tracer failed")
    	}
    	defer func() {
    		if err := tp.Shutdown(context.Background()); err != nil {
    			log.Warn().Err(err).Msg("Error shutting down tracer provider")
    		}
    	}()
    }

	// start echo server
	e := echo.New()
	e.Use(echoMiddleware.CORS())
	e.Use(echoMiddleware.Logger())
	// e.Use(otelecho.Middleware(core.AppConfig.Sid))
	e.Use(middleware.PolicyHandler) // Policy Enforcement Point to check access

	{{- if .AddDatabase}}
		db.InitDB()
		defer db.CloseDB()
	{{- end}}

	rest.NewHandler(e)


	{{- if .AddFrontend }}

	// serve doc
	if core.AppConfig.ElementsDoc {
	   e.FileFS("/doc", "web/doc/elements.html", embeddedFS)
	} else if core.AppConfig.RapidocDoc {
	   e.FileFS("/doc", "web/doc/rapidoc.html", embeddedFS)
	}
	e.FileFS("/{{.OpenAPIName}}.yaml", "web/doc/{{.OpenAPIName}}.yaml", embeddedFS)

	// serve default stylesheets and javascript files
	e.StaticFS("/css/", echo.MustSubFS(web.Css, "css"))
	e.StaticFS("/js/", echo.MustSubFS(web.Js, "js"))
	e.StaticFS("/images/", echo.MustSubFS(web.Images, "images"))
	e.StaticFS("/", echo.MustSubFS(web.Public, "public"))
	{{end}}



	if core.AppConfig.CertPem != "" && core.AppConfig.KeyPem != "" {
		e.Logger.Fatal(e.StartTLS(":" + core.AppConfig.PortNb, []byte(core.AppConfig.CertPem), []byte(core.AppConfig.KeyPem)))
	} else {
		e.Logger.Fatal(e.Start(":" + core.AppConfig.PortNb))
	}
}
