// Don't edit this file, as it is generated by dredger
package pages

import (
	"embed"
	"strconv"
	"strings"

	"github.com/BurntSushi/toml"
	"github.com/labstack/echo/v4"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"golang.org/x/text/language"

	"{{ .ModuleName }}/core"
	"{{ .ModuleName }}/core/log"
)

//go:embed locales/locale.*.toml
var LocaleFS embed.FS

var Bundle *i18n.Bundle

func init() {
	Bundle = i18n.NewBundle(language.English)
	Bundle.RegisterUnmarshalFunc("toml", toml.Unmarshal)
	for _, l := range core.AppConfig.Languages {
		_, err := Bundle.LoadMessageFileFS(LocaleFS, "locales/locale."+l+".toml")
		if err != nil {
			log.Error().Str("filename", "locales/locale."+l+".toml").Err(err).Msg("Loading catalog failed")
		} else {
			log.Debug().Str("language", l).Msg("Added message catalog")
		}
	}
	log.Info().Any("languages", Bundle.LanguageTags()).Msg("Message catalogs")
}

// extract language from the HTTP header
// If x-language is set it will override the browsers preferred languages
func Language(c echo.Context) string {
	lang := core.AppConfig.Language
	if l := c.Request().Header.Get("x-language"); l != "" {
		lang = l
	} else if l := c.Request().URL.Query().Get("language"); l != "" {
		lang = l
	} else {
		prio := 0.0
		for _, set := range strings.Split(c.Request().Header.Get("accept-language"), ",") {
			newPrio := 1.0
			newLang := ""
			for _, nl := range strings.Split(set, ";") {
				if strings.HasPrefix(nl, "q=") {
					if f, err := strconv.ParseFloat(strings.Split(nl, "=")[1], 32); err == nil {
						newPrio = f
					}
				} else {
					for _, l := range core.AppConfig.Languages {
						if l == nl {
							newLang = nl
						}
					}
				}
			}
			if (newPrio > prio) && (newLang != "") {
				prio = newPrio
				lang = newLang
			}
		}
	}
	return lang
}

func localize(localizer *i18n.Localizer, msg string) string {
	lcMsg, err := localizer.LocalizeMessage(&i18n.Message{ID: msg})
	if err != nil {
		log.Error().Err(err).Str("ID", msg).Msg("Localizing string failed")
		return ">ERROR<"
	}
	return lcMsg
}
